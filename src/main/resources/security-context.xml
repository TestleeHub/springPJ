<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
		
	<security:http pattern="/resources/**" security="none" />
	<security:http pattern="/common/**" security="none" />
	<security:http auto-config="true" use-expressions="true"
		create-session="never">

 		<!-- 관리자 권한 영역 : 상품관리 -->
<!-- 		<security:intercept-url pattern="/**.pd"
			access="hasRole('ROLE_ADMIN')" /> -->

		<!-- 권한에 관계없이 접속 가능영역(guest도 접속 가능) -->
		<security:intercept-url pattern="/**.do"
			access="permitAll" />
		<security:intercept-url pattern="/**.cu"
			access="permitAll" />
		<security:intercept-url pattern="/**.ex"
			access="hasAnyRole('ROLE_ADMIN', 'ROLE_EXPERT')" />

		<!-- 로그인한 사용자 영역(customer + 관리자) : id가 pk이므로 hasRole을 주면 admin권한 또는 user 
			권한 1개밖에 부여할 수 없다. 따라서 hasAnyRole을 주면 권한 여러개 가능. -->
<!-- 		<security:intercept-url pattern="/**.bo"
			access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" /> -->

		<!-- 로그인폼 -->
		<!-- login.do => login_check.do => UserAuthenticationService => 성공/실패/거부 -->
		<!-- 5개 설정을 소스와 일치시켜야 한다. -->
		<security:form-login login-page="/login.do"
			login-processing-url="/loginAction.do"
			authentication-success-handler-ref="userLoginSuccessHandler"
			authentication-failure-handler-ref="userLoginFailureHandler"
			username-parameter="id" password-parameter="password" />
 		<security:session-management>
			<!-- 같은 브라우저에서 여러창 동시접속수 / 세션만료시 이동할 주소 / 최대 세션 초과시 에러 옵션 -->
			<security:concurrency-control
				max-sessions="2" expired-url="/login.do"
				error-if-maximum-exceeded="true" />
		</security:session-management>

		<!-- 접근 권한이 없는 경우 작동 -->
		<security:access-denied-handler
			ref="userDeniedHandler" />
	</security:http>
	
	<!-- <security:authentication-manager>
		<security:authentication-provider user-service-ref="userService"/>
	</security:authentication-manager> -->

	<!-- 로그인 성공시 작동 -->
	<bean id="userLoginSuccessHandler"
		class="spring.mvc.pj_lyw.service.security.UserLoginSuccessHandler">
		<constructor-arg name="sqlSession" ref="sqlSession" />
	</bean>

	<!-- 로그인 실패시 작동 -->
	<bean id="userLoginFailureHandler"
		class="spring.mvc.pj_lyw.service.security.UserLoginFailureHandler">
		<constructor-arg name="sqlSession" ref="sqlSession" />
		<constructor-arg name="passwordEncoder" ref="bCryptPasswordEncoder" />
	</bean>

	<!-- 접근 권한이 없는 경우 작동 -->
	<bean id="userDeniedHandler"
		class="spring.mvc.pj_lyw.service.security.UserDeniedHandler" />

	<!-- 로그인 인증처리 클래스 : 비밀번호인증, 로그인 성공, 실패, 권한없음을 판단 -->
	<!-- userService는 login-processing-url="/loginAction.do"에 의해 자동호출되므로 우리가 
		만든 loginAction.do는 주석처리 -->
	<bean id="userService"
		class="spring.mvc.pj_lyw.service.security.UserAuthenticationService"> 
		<constructor-arg name="sqlSession" ref="sqlSession" />
	</bean>

	<!-- 비밀번호 암호화 클래스 -->
	<bean id="bCryptPasswordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

</beans>
